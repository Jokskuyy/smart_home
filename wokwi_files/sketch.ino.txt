#include <WiFi.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>
#include <DHT.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <TimeLib.h>
#include <ArduinoJson.h>

const char* WIFI_SSID = "Wokwi-GUEST";
const char* WIFI_PASSWORD = "";

// Secure MQTT Configuration
const char* MQTT_BROKER = "ce49f6761a1a4e94bd7e855f78e02e43.s1.eu.hivemq.cloud";
const int MQTT_PORT = 8883;
const char* MQTT_USERNAME = "imann";
const char* MQTT_PASSWORD = "Jokokoko111";
const char* MQTT_CLIENT_ID = "smarthome_esp32_client_001";

const char* TOPIC_SENSORS        = "smarthome/sensors/data";
const char* TOPIC_CLIMATE        = "smarthome/climate/data";
const char* TOPIC_SECURITY       = "smarthome/security/data";
const char* TOPIC_STATUS         = "smarthome/status";
const char* TOPIC_ALERTS         = "smarthome/alerts";
const char* TOPIC_RESPONSE       = "smarthome/response";
const char* TOPIC_LIGHTS_CONTROL = "smarthome/control/lights";
const char* TOPIC_FAN_CONTROL    = "smarthome/control/fan";
const char* TOPIC_LOCK_CONTROL   = "smarthome/control/lock";

#define MQ2_ANALOG_PIN    34
#define MQ2_DIGITAL_PIN   5
#define PIR_DOOR_PIN      2
#define PIR_ROOM_PIN      18
#define DHT_PIN           15
#define BUZZER_PIN        12
#define FIRE_LED_PIN      13
#define CAMERA_LED_PIN    14
#define LIGHT_LED_PIN     27
#define FAN_LED_PIN       26
#define SERVO_PIN         25
#define SDA_PIN           21
#define SCL_PIN           22

#define DHT_TYPE DHT22
#define DS1307_I2C_ADDRESS 0x68

WiFiClientSecure espClient;
PubSubClient mqttClient(espClient);
DHT dht(DHT_PIN, DHT_TYPE);
Servo doorLock;

bool fireAlarmActive = false;
float gasVoltage = 0.0;
int gasLevel = 0;
int gasPercentage = 0;
float gasPPM = 0.0;
bool digitalGasDetected = false;

int lastDoorMotionState = LOW;
int lastRoomMotionState = LOW;
unsigned long lastMotionTimeRoom = 0;

float temperature = 25.0;
float humidity = 60.0;
bool fanAutoMode = true;

bool lightAutoMode = true;

bool lockStatus = false;

int currentHour = 12;
int currentMinute = 0;
String currentTimeString = "12:00";

unsigned long lastSensorRead = 0;
unsigned long lastMqttReconnectAttempt = 0;
unsigned long lastStatusPublish = 0;
unsigned long lastClimatePublish = 0;

void connectToWiFi();
void connectToMqtt();
void mqttCallback(char* topic, byte* payload, unsigned int length);
void handleControlCommands(const char* topic, JsonDocument& doc);
void handleLightControl(const char* action);
void handleFanControl(const char* action);
void handleLockControl(const char* action);
void handleBackendResponse(JsonDocument& doc);
void checkAllSensors();
void readMQ2GasSensor();
void checkFireAlarmSystem();
void readMotionSensors();
void readClimateData();
void controlFanByTemperature();
void autoLightControl();
void checkEnergySavingMode();
void setDS1307Time(byte second, byte minute, byte hour, byte dayOfWeek, byte dayOfMonth, byte month, byte year);
void readDS1307Time(int* hour, int* minute);
void updateCurrentTime();
void publishSensorData();
void publishClimateData();
void publishDeviceStatus();
void publishSecurityEvent(const char* eventType, const char* status, const char* location);
void publishAlert(const char* alertType, const char* priority, const char* title, const char* message, JsonObject metadata = JsonObject());
void initializePins();
byte decToBcd(byte val);
byte bcdToDec(byte val);
bool publishMqttMessage(const char* topic, const char* message, bool retain = false);

void setup() {
  Serial.begin(115200);
  Serial.println("\n" + String('=', 50));
  Serial.println("üè† SMART HOME SYSTEM INITIALIZING (v1.3.1)");
  Serial.println(String('=', 50));
  
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, HIGH);
  delay(200);
  digitalWrite(BUZZER_PIN, LOW);
  Serial.println("üîä Buzzer test completed.");
  
  Wire.begin(SDA_PIN, SCL_PIN);
  Serial.println("‚è∞ I2C initialized for RTC.");
  
  initializePins();
  Serial.println("üìå All GPIO pins initialized.");
  
  dht.begin();
  Serial.println("üå°Ô∏è DHT22 sensor initialized.");
  
  doorLock.attach(SERVO_PIN);
  doorLock.write(0);
  Serial.println("üîì Smart lock initialized (unlocked).");
  
  setDS1307Time(0, 30, 12, 1, 1, 1, 24);
  Serial.println("‚è∞ RTC time initialized to 12:30.");
  
  connectToWiFi();
  
  // Configure secure client
  espClient.setInsecure(); // For development - in production use proper certificates
  
  mqttClient.setServer(MQTT_BROKER, MQTT_PORT);
  mqttClient.setCallback(mqttCallback);
  mqttClient.setBufferSize(1024); // Increase buffer size for larger messages
  Serial.println("üì° Secure MQTT client configured.");
  
  Serial.println(String('=', 50));
  Serial.println("‚úÖ SMART HOME SYSTEM READY!");
  Serial.println("üåê Secure MQTT Broker: " + String(MQTT_BROKER) + ":" + String(MQTT_PORT));
  Serial.println("   Client ID: " + String(MQTT_CLIENT_ID));
  Serial.println("   Username: " + String(MQTT_USERNAME));
  Serial.println("   Monitoring topics for commands and data...");
  Serial.println(String('=', 50));
  
  // Initial publish with delay to ensure connection is stable
  delay(2000);
  publishDeviceStatus();
}

void loop() {
  if (!mqttClient.connected()) {
    connectToMqtt();
  }
  mqttClient.loop();
  
  updateCurrentTime();

  // Publish sensor data every 3 seconds
  if (millis() - lastSensorRead > 3000) {
    checkAllSensors();
    publishSensorData();
    lastSensorRead = millis();
  }
  
  // Publish climate data every 10 seconds
  if (millis() - lastClimatePublish > 10000) {
    publishClimateData();
    lastClimatePublish = millis();
  }
  
  // Publish device status every 30 seconds
  if (millis() - lastStatusPublish > 30000) {
    publishDeviceStatus();
    lastStatusPublish = millis();
  }
  
  autoLightControl();
  checkEnergySavingMode();
  
  delay(100);
}

void connectToWiFi() {
    Serial.print("üîó Menghubungkan ke WiFi: ");
    Serial.println(WIFI_SSID);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    unsigned long connectStartTime = millis();
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
        if (millis() - connectStartTime > 15000) { // Increased timeout
            Serial.println("\n‚ö†Ô∏è Koneksi WiFi timeout. Mencoba lagi...");
            connectStartTime = millis();
            WiFi.disconnect();
            delay(1000);
            WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
        }
    }
    Serial.println("\n‚úÖ WiFi Terhubung!");
    Serial.print("üì∂ Alamat IP: ");
    Serial.println(WiFi.localIP());
    Serial.print("üì∂ Signal Strength: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
}

void connectToMqtt() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ö†Ô∏è WiFi terputus, mencoba reconnect...");
        connectToWiFi();
        return;
    }
    
    if (millis() - lastMqttReconnectAttempt > 5000) {
        lastMqttReconnectAttempt = millis();
        Serial.print("üîÑ Mencoba koneksi Secure MQTT...");
        
        // Clean disconnect first
        if (mqttClient.connected()) {
            mqttClient.disconnect();
        }
        
        if (mqttClient.connect(MQTT_CLIENT_ID, MQTT_USERNAME, MQTT_PASSWORD)) {
            Serial.println(" ‚úÖ Terhubung ke HiveMQ Cloud!");
            
            // Subscribe to control topics
            bool subSuccess = true;
            subSuccess &= mqttClient.subscribe(TOPIC_LIGHTS_CONTROL, 1);
            subSuccess &= mqttClient.subscribe(TOPIC_FAN_CONTROL, 1);
            subSuccess &= mqttClient.subscribe(TOPIC_LOCK_CONTROL, 1);
            subSuccess &= mqttClient.subscribe(TOPIC_RESPONSE, 1);
            
            if (subSuccess) {
                Serial.println("üì° Berlangganan topik kontrol berhasil.");
            } else {
                Serial.println("‚ö†Ô∏è Beberapa subscription gagal.");
            }
            
            // Publish initial status
            delay(1000);
            publishDeviceStatus();
            
        } else {
            Serial.printf(" ‚ùå Gagal, kode status: %d", mqttClient.state());
            switch(mqttClient.state()) {
                case -4: Serial.println(" (Connection timeout)"); break;
                case -3: Serial.println(" (Connection lost)"); break;
                case -2: Serial.println(" (Connect failed)"); break;
                case -1: Serial.println(" (Disconnected)"); break;
                case 1: Serial.println(" (Bad protocol)"); break;
                case 2: Serial.println(" (Bad client ID)"); break;
                case 3: Serial.println(" (Unavailable)"); break;
                case 4: Serial.println(" (Bad credentials)"); break;
                case 5: Serial.println(" (Unauthorized)"); break;
                default: Serial.println(" (Unknown error)"); break;
            }
            Serial.println("   Mencoba lagi dalam 5s...");
        }
    }
}

bool publishMqttMessage(const char* topic, const char* message, bool retain) {
    if (!mqttClient.connected()) {
        Serial.println("‚ùå MQTT tidak terhubung, tidak bisa publish.");
        return false;
    }
    
    // Check message size
    size_t msgLen = strlen(message);
    if (msgLen > 900) { // Leave some buffer
        Serial.printf("‚ö†Ô∏è Pesan terlalu besar (%d bytes), dipotong.\n", msgLen);
        return false;
    }
    
    bool result = mqttClient.publish(topic, message, retain);
    if (result) {
        Serial.printf("üì§ Published to %s: %s\n", topic, message);
    } else {
        Serial.printf("‚ùå Gagal publish ke %s\n", topic);
    }
    
    // Give time for message to be sent
    mqttClient.loop();
    delay(10);
    
    return result;
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
    Serial.println("\n--- Pesan MQTT Diterima ---");
    Serial.print("   [TOPIC]: ");
    Serial.println(topic);
    
    String messageString = "";
    for (int i = 0; i < length; i++) {
        messageString += (char)payload[i];
    }
    Serial.print("   [PAYLOAD]: ");
    Serial.println(messageString);
    
    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, messageString);
    if (error) {
        Serial.printf("‚ùå [JSON]: Gagal parsing pesan: %s\n", error.f_str());
        return;
    }
    
    handleControlCommands(topic, doc);
    Serial.println("---------------------------");
}

void handleControlCommands(const char* topic, JsonDocument& doc) {
    const char* action = doc["action"];
    if (!action) {
        Serial.println("‚ö†Ô∏è [Kontrol]: Perintah 'action' tidak ditemukan dalam payload.");
        return;
    }
    
    if (strcmp(topic, TOPIC_LIGHTS_CONTROL) == 0) handleLightControl(action);
    else if (strcmp(topic, TOPIC_FAN_CONTROL) == 0) handleFanControl(action);
    else if (strcmp(topic, TOPIC_LOCK_CONTROL) == 0) handleLockControl(action);
    else if (strcmp(topic, TOPIC_RESPONSE) == 0) handleBackendResponse(doc);
    else Serial.printf("‚ùì [Kontrol]: Topik tidak dikenal: %s\n", topic);
}

void handleLightControl(const char* action) {
    if (strcmp(action, "on") == 0) {
        digitalWrite(LIGHT_LED_PIN, HIGH);
        lightAutoMode = false;
        Serial.println("üí° [Lampu]: Lampu menyala (Manual).");
    } else if (strcmp(action, "off") == 0) {
        digitalWrite(LIGHT_LED_PIN, LOW);
        lightAutoMode = false;
        Serial.println("üí° [Lampu]: Lampu mati (Manual).");
    } else if (strcmp(action, "auto") == 0) {
        lightAutoMode = true;
        Serial.println("üí° [Lampu]: Mode otomatis diaktifkan.");
    }
}

void handleFanControl(const char* action) {
    if (strcmp(action, "on") == 0) {
        digitalWrite(FAN_LED_PIN, HIGH);
        fanAutoMode = false;
        Serial.println("üåÄ [Kipas]: Kipas menyala (Manual).");
    } else if (strcmp(action, "off") == 0) {
        digitalWrite(FAN_LED_PIN, LOW);
        fanAutoMode = false;
        Serial.println("üåÄ [Kipas]: Kipas mati (Manual).");
    } else if (strcmp(action, "auto") == 0) {
        fanAutoMode = true;
        Serial.println("üåÄ [Kipas]: Mode otomatis diaktifkan.");
    }
}

void handleLockControl(const char* action) {
    if (strcmp(action, "lock") == 0) {
        doorLock.write(90);
        lockStatus = true;
        Serial.println("üîí [Kunci]: Pintu TERKUNCI (Perintah Remote).");
        
        // Publish lock status change
        publishSecurityEvent("door_lock", "locked", "Pintu Depan");
        
    } else if (strcmp(action, "unlock") == 0) {
        doorLock.write(0);
        lockStatus = false;
        Serial.println("üîì [Kunci]: Pintu TIDAK TERKUNCI (Perintah Remote).");
        
        // Publish lock status change
        publishSecurityEvent("door_lock", "unlocked", "Pintu Depan");
    }
}

void handleBackendResponse(JsonDocument& doc) {
    bool success = doc["success"];
    const char* message = doc["message"];
    if (success) {
        Serial.printf("‚úÖ [Backend]: Sukses - %s\n", message ? message : "Tidak ada pesan.");
    } else {
        const char* error = doc["error"];
        Serial.printf("‚ùå [Backend]: Error - %s\n", error ? error : "Error tidak diketahui.");
    }
}

void checkAllSensors() {
    readMQ2GasSensor();
    checkFireAlarmSystem();
    readMotionSensors();
    readClimateData();
    controlFanByTemperature();
}

void readMQ2GasSensor() {
    gasLevel = analogRead(MQ2_ANALOG_PIN);
    gasVoltage = (gasLevel * 5.0) / 4095.0;
    gasPercentage = map(gasLevel, 0, 4095, 0, 100);
    digitalGasDetected = digitalRead(MQ2_DIGITAL_PIN);
    gasPPM = (gasPercentage / 100.0) * 1000.0;
}

void checkFireAlarmSystem() {
    bool fireDetected = (gasPercentage > 60) || (digitalGasDetected == HIGH);
    
    if (fireDetected && !fireAlarmActive) {
        fireAlarmActive = true;
        digitalWrite(FIRE_LED_PIN, HIGH);
        tone(BUZZER_PIN, 1000);
        
        // Create metadata for alert
        StaticJsonDocument<128> metaDoc;
        metaDoc["gas_level"] = gasLevel;
        metaDoc["gas_percentage"] = gasPercentage;
        metaDoc["gas_ppm"] = gasPPM;
        metaDoc["digital_detected"] = digitalGasDetected;
        JsonObject metadata = metaDoc.as<JsonObject>();
        
        String alertMessage = "üî• KRITIS: Gas terdeteksi! Level: " + String(gasPercentage) + "% (" + String(gasPPM, 1) + " PPM)";
        publishAlert("fire_alarm", "critical", "üö® ALARM KEBAKARAN AKTIF!", alertMessage.c_str(), metadata);
        Serial.println("\nüö® ALARM KEBAKARAN AKTIF!");
        
    } else if (!fireDetected && fireAlarmActive) {
        fireAlarmActive = false;
        digitalWrite(FIRE_LED_PIN, LOW);
        noTone(BUZZER_PIN);
        
        publishAlert("fire_alarm", "info", "‚úÖ Alarm Kebakaran Nonaktif", "Level gas kembali normal");
        Serial.println("‚úÖ Alarm kebakaran dinonaktifkan - level gas normal.");
    }
}

void readMotionSensors() {
  int currentDoorMotionState = digitalRead(PIR_DOOR_PIN);

  if (currentDoorMotionState == HIGH && lastDoorMotionState == LOW) {
    Serial.println("üé• Gerakan PINTU terdeteksi!");
    digitalWrite(CAMERA_LED_PIN, HIGH);
    publishSecurityEvent("motion_door", "detected", "Pintu Depan");
  }
  else if (currentDoorMotionState == LOW && lastDoorMotionState == HIGH) {
    Serial.println("üö™ Gerakan PINTU berhenti.");
    digitalWrite(CAMERA_LED_PIN, LOW);
    publishSecurityEvent("motion_door", "cleared", "Pintu Depan");
  }
  lastDoorMotionState = currentDoorMotionState;

  int currentRoomMotionState = digitalRead(PIR_ROOM_PIN);

  if (currentRoomMotionState == HIGH && lastRoomMotionState == LOW) {
    Serial.println("üë§ Gerakan di RUANGAN terdeteksi.");
    publishSecurityEvent("motion_room", "detected", "Ruang Tengah");
  }
  else if (currentRoomMotionState == LOW && lastRoomMotionState == HIGH) {
    Serial.println("üõãÔ∏è Gerakan di RUANGAN berhenti.");
    publishSecurityEvent("motion_room", "cleared", "Ruang Tengah");
  }

  if(currentRoomMotionState == HIGH) {
    lastMotionTimeRoom = millis();
  }
  lastRoomMotionState = currentRoomMotionState;
}

void readClimateData() {
    float newTemp = dht.readTemperature();
    float newHumidity = dht.readHumidity();
    
    if (!isnan(newTemp) && !isnan(newHumidity)) {
        temperature = newTemp;
        humidity = newHumidity;
    } else {
        Serial.println("‚ö†Ô∏è [DHT22]: Pembacaan sensor gagal.");
    }
}

void controlFanByTemperature() {
    if (!fanAutoMode) return;
    
    bool shouldTurnOn = temperature > 28.0;
    bool shouldTurnOff = temperature < 26.0;
    bool currentFanState = digitalRead(FAN_LED_PIN);
    
    if (shouldTurnOn && !currentFanState) {
        digitalWrite(FAN_LED_PIN, HIGH);
        Serial.println("üåÄ [Auto]: Kipas menyala karena suhu tinggi (" + String(temperature) + "¬∞C)");
    } else if (shouldTurnOff && currentFanState) {
        digitalWrite(FAN_LED_PIN, LOW);
        Serial.println("üåÄ [Auto]: Kipas mati karena suhu normal (" + String(temperature) + "¬∞C)");
    }
}

void autoLightControl() {
    if (!lightAutoMode) return;
    
    bool isNightTime = (currentHour >= 18 || currentHour < 6);
    bool currentLightState = digitalRead(LIGHT_LED_PIN);
    
    if (isNightTime && !currentLightState) {
        digitalWrite(LIGHT_LED_PIN, HIGH);
        Serial.println("üí° [Auto]: Lampu menyala untuk mode malam (" + currentTimeString + ")");
    } else if (!isNightTime && currentLightState) {
        digitalWrite(LIGHT_LED_PIN, LOW);
        Serial.println("üí° [Auto]: Lampu mati untuk mode siang (" + currentTimeString + ")");
    }
}

void checkEnergySavingMode() {
    const unsigned long ENERGY_SAVE_DELAY = 120000; // 2 minutes
    
    if (millis() - lastMotionTimeRoom > ENERGY_SAVE_DELAY && 
        (digitalRead(LIGHT_LED_PIN) == HIGH || digitalRead(FAN_LED_PIN) == HIGH)) {
        
        digitalWrite(LIGHT_LED_PIN, LOW);
        digitalWrite(FAN_LED_PIN, LOW);
        
        String message = "Perangkat dimatikan karena tidak ada aktivitas pada " + currentTimeString;
        publishAlert("energy_save", "low", "‚ö° Mode Hemat Energi Aktif", message.c_str());
        Serial.println("‚ö° Mode hemat energi aktif pada " + currentTimeString);
    }
}

void setDS1307Time(byte second, byte minute, byte hour, byte dayOfWeek, byte dayOfMonth, byte month, byte year) {
    Wire.beginTransmission(DS1307_I2C_ADDRESS);
    Wire.write(0);
    Wire.write(decToBcd(second));
    Wire.write(decToBcd(minute));
    Wire.write(decToBcd(hour));
    Wire.write(decToBcd(dayOfWeek));
    Wire.write(decToBcd(dayOfMonth));
    Wire.write(decToBcd(month));
    Wire.write(decToBcd(year));
    Wire.endTransmission();
}

void readDS1307Time(int* hour, int* minute) {
    Wire.beginTransmission(DS1307_I2C_ADDRESS);
    Wire.write(0);
    Wire.endTransmission();
    Wire.requestFrom(DS1307_I2C_ADDRESS, 7);
    
    if (Wire.available() >= 7) {
        byte second = bcdToDec(Wire.read() & 0x7f);
        *minute = bcdToDec(Wire.read());
        *hour = bcdToDec(Wire.read() & 0x3f);
        Wire.read(); Wire.read(); Wire.read(); Wire.read(); // Read remaining bytes
    }
}

void updateCurrentTime() {
    readDS1307Time(&currentHour, &currentMinute);
    String hourStr = (currentHour < 10) ? "0" + String(currentHour) : String(currentHour);
    String minuteStr = (currentMinute < 10) ? "0" + String(currentMinute) : String(currentMinute);
    currentTimeString = hourStr + ":" + minuteStr;
}

void publishSensorData() {
    if (!mqttClient.connected()) return;
    
    StaticJsonDocument<512> doc;
    doc["device_id"] = MQTT_CLIENT_ID;
    doc["timestamp"] = millis();
    doc["time"] = currentTimeString;
    doc["gas_level"] = gasLevel;
    doc["gas_percentage"] = gasPercentage;
    doc["gas_ppm"] = gasPPM;
    doc["digital_gas"] = digitalGasDetected;
    doc["fire_alarm_active"] = fireAlarmActive;
    doc["lock_status"] = lockStatus ? "locked" : "unlocked";
    doc["light_on"] = digitalRead(LIGHT_LED_PIN) == HIGH;
    doc["fan_on"] = digitalRead(FAN_LED_PIN) == HIGH;
    doc["light_auto_mode"] = lightAutoMode;
    doc["fan_auto_mode"] = fanAutoMode;
    
    char jsonBuffer[512];
    size_t len = serializeJson(doc, jsonBuffer);
    
    if (len > 0) {
        publishMqttMessage(TOPIC_SENSORS, jsonBuffer);
    } else {
        Serial.println("‚ùå Gagal serialize sensor data");
    }
}

void publishClimateData() {
    if (!mqttClient.connected()) return;
    
    StaticJsonDocument<256> doc;
    doc["device_id"] = MQTT_CLIENT_ID;
    doc["timestamp"] = millis();
    doc["time"] = currentTimeString;
    doc["temperature"] = temperature;
    doc["humidity"] = humidity;
    doc["heat_index"] = dht.computeHeatIndex(temperature, humidity, false);
    
    char jsonBuffer[256];
    size_t len = serializeJson(doc, jsonBuffer);
    
    if (len > 0) {
        publishMqttMessage(TOPIC_CLIMATE, jsonBuffer);
    } else {
        Serial.println("‚ùå Gagal serialize climate data");
    }
}

void publishDeviceStatus() {
    if (!mqttClient.connected()) return;
    
    StaticJsonDocument<512> doc;
    doc["device_id"] = MQTT_CLIENT_ID;
    doc["status"] = "online";
    doc["ip_address"] = WiFi.localIP().toString();
    doc["wifi_rssi"] = WiFi.RSSI();
    doc["wifi_quality"] = constrain(2 * (WiFi.RSSI() + 100), 0, 100);
    doc["free_heap"] = ESP.getFreeHeap();
    doc["uptime_seconds"] = millis() / 1000;
    doc["firmware_version"] = "1.3.1";
    doc["time"] = currentTimeString;
    doc["mqtt_connected"] = mqttClient.connected();
    doc["sensors_active"] = true;
    
    char jsonBuffer[512];
    size_t len = serializeJson(doc, jsonBuffer);
    
    if (len > 0) {
        bool result = publishMqttMessage(TOPIC_STATUS, jsonBuffer, true); // Retain status message
        if (result) {
            Serial.println("‚úÖ Status perangkat dipublikasikan");
        }
    } else {
        Serial.println("‚ùå Gagal serialize status data");
    }
}

void publishSecurityEvent(const char* eventType, const char* status, const char* location) {
    if (!mqttClient.connected()) return;
    
    StaticJsonDocument<256> doc;
    doc["device_id"] = MQTT_CLIENT_ID;
    doc["event_type"] = eventType;
    doc["status"] = status;
    doc["location"] = location;
    doc["timestamp"] = millis();
    doc["time"] = currentTimeString;
    
    char jsonBuffer[256];
    size_t len = serializeJson(doc, jsonBuffer);
    
    if (len > 0) {
        bool result = publishMqttMessage(TOPIC_SECURITY, jsonBuffer);
        if (result) {
            Serial.printf("üì§ Event Keamanan: { Tipe: %s, Status: %s, Lokasi: %s }\n", eventType, status, location);
        }
    } else {
        Serial.println("‚ùå Gagal serialize security event");
    }
}

void publishAlert(const char* alertType, const char* priority, const char* title, const char* message, JsonObject metadata) {
    if (!mqttClient.connected()) return;
    
    StaticJsonDocument<512> doc;
    doc["device_id"] = MQTT_CLIENT_ID;
    doc["alert_type"] = alertType;
    doc["priority"] = priority;
    doc["title"] = title;
    doc["message"] = message;
    doc["created_at"] = currentTimeString;
    doc["timestamp"] = millis();
    
    if (!metadata.isNull()) {
        doc["metadata"] = metadata;
    }
    
    char jsonBuffer[512];
    size_t len = serializeJson(doc, jsonBuffer);
    
    if (len > 0) {
        bool result = publishMqttMessage(TOPIC_ALERTS, jsonBuffer);
        if (result) {
            Serial.printf("üö® Alert: %s - %s\n", alertType, title);
        }
    } else {
        Serial.println("‚ùå Gagal serialize alert data");
    }
}

void initializePins() {
    pinMode(MQ2_ANALOG_PIN, INPUT);
    pinMode(MQ2_DIGITAL_PIN, INPUT);
    pinMode(PIR_DOOR_PIN, INPUT);
    pinMode(PIR_ROOM_PIN, INPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(FIRE_LED_PIN, OUTPUT);
    pinMode(CAMERA_LED_PIN, OUTPUT);
    pinMode(LIGHT_LED_PIN, OUTPUT);
    pinMode(FAN_LED_PIN, OUTPUT);
    
    // Initialize all outputs to LOW
    digitalWrite(FIRE_LED_PIN, LOW);
    digitalWrite(CAMERA_LED_PIN, LOW);
    digitalWrite(LIGHT_LED_PIN, LOW);
    digitalWrite(FAN_LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
}

byte decToBcd(byte val) { 
    return ((val / 10 * 16) + (val % 10)); 
}

byte bcdToDec(byte val) { 
    return ((val / 16 * 10) + (val % 16)); 
}